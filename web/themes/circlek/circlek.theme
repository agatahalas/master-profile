<?php

/**
 * @file
 * Functions to support theming in the circlek theme.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Link;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Site\Settings;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html;
use Drupal\file\Plugin\Field\FieldType\FileItem;
use Drupal\Core\GeneratedLink;
use Drupal\media\Entity\Media;
use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
use Drupal\node\Entity\Node;
use Drupal\views\Views;

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function circlek_preprocess_html(array &$variables) {
  // Add CSS class to body that represents
  // specific site by using site_code.
  $variables['attributes']['class'][] = 'cp';

  if (Settings::get('ck_environment') === 'local') {
    $variables['page']['#attached']['library'][] = 'circlek/local-global-css';
    $variables['page']['#attached']['library'][] = 'circlek/local-global-scripts';
  }
  else {
    $variables['page']['#attached']['library'][] = 'circlek/global-css';
    $variables['page']['#attached']['library'][] = 'circlek/global-scripts';
  }

  // Theme html part of maintanace page.
  if (!empty($variables['page']['#theme']) && $variables['page']['#theme'] == 'maintenance_page') {
    $variables['attributes']['class'][] = 'uk-position-center';
    $variables['attributes']['class'][] = 'uk-text-center';
  }
}

/**
 * Implements hook_library_info_alter().
 */
function circlek_library_info_alter(&$libraries, $extension) {
  if (!empty($libraries['global-css'])) {
    $libraries['global-css']['css']['base']['assets/uikit/dist/css/uikit.customer-profile.min.css']['minified'] = TRUE;
    unset($libraries['global-css']['css']['base']['assets/uikit/dist/css/uikit.circlek.min.css']);
  }

  if (!empty($libraries['local-global-css'])) {
    $libraries['local-global-css']['css']['base']['assets/uikit/dist/css/uikit.customer-profile.css']['minified'] = FALSE;
    unset($libraries['local-global-css']['css']['base']['assets/uikit/dist/css/uikit.circlek.css']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for region.
 */
function circlek_preprocess_region(array &$variables) {
  $wrapper_attributes = new Attribute();

  // Add container and other classes to top region.
  if ($variables['region'] == 'top') {
    $wrapper_attributes->addClass('uk-container');
    $wrapper_attributes->addClass('uk-container-large');
    $wrapper_attributes->addClass('uk-padding-remove-left');
    $wrapper_attributes->addClass('uk-padding-remove-right');
    $wrapper_attributes->addClass('top-region');
    $variables['wrapper_attributes'] = $wrapper_attributes;
    $variables['attributes']['class'] = [
      'uk-flex',
      'uk-container',
      'uk-margin-auto',
    ];
    $variables['attributes']['uk-grid'] = TRUE;
  }

  // Add container and other classes to header region.
  if ($variables['region'] == 'header') {
    $wrapper_attributes->addClass('uk-container');
    $wrapper_attributes->addClass('header-region');
    $variables['wrapper_attributes'] = $wrapper_attributes;
    $variables['attributes']['class'] = [
      'uk-padding-small',
      'uk-padding-remove-left',
      'uk-padding-remove-right',
      'uk-clearfix',
    ];
  }

  // Add CSS classes to content region.
  if ($variables['region'] == 'content') {
    $variables['attributes']['class'] = [
      'content-region',
    ];
  }

  // Add container and other classes to footer region.
  if ($variables['region'] == 'footer') {
    $wrapper_attributes->addClass('uk-container');
    $wrapper_attributes->addClass('uk-container-large');
    $wrapper_attributes->addClass('footer-region');
    $variables['wrapper_attributes'] = $wrapper_attributes;
    $variables['attributes']['class'] = [
      'uk-padding',
      'footer-region-inner',
    ];

  }

  // Add container and other classes to bottom region.
  if ($variables['region'] == 'bottom') {
    $wrapper_attributes->addClass('uk-container');
    $wrapper_attributes->addClass('uk-container-large');
    $wrapper_attributes->addClass('bottom-region');
    $variables['wrapper_attributes'] = $wrapper_attributes;
    $variables['attributes']['uk-grid'] = TRUE;

    $inner_attributes = new Attribute();
    $inner_attributes->addClass('bottom-region-inner');
    $variables['inner_attributes'] = $inner_attributes;

    $container_attributes = new Attribute();
    $container_attributes->addClass('uk-container');
    $variables['container_attributes'] = $container_attributes;
  }

  // Add container class to admin_area region.
  if ($variables['region'] == 'admin_area') {
    $wrapper_attributes->addClass('uk-container');
    $variables['wrapper_attributes'] = $wrapper_attributes;
  }
}

/**
 * Implements template_preprocess_page().
 */
function circlek_preprocess_page(&$variables) {
  // Add uk-container CSS class to all `<main>`
  // tags across the page except landing_page and homepage pages.
  $variables['attributes']['role'] = 'main';
  $variables['attributes']['class'][] = 'uk-container';
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function circlek_preprocess_block(array &$variables) {
  // Add CSS classes to admin dashboard link.
  if (!empty($variables['plugin_id']) && $variables['plugin_id'] == 'cp_admin_dashboard_link') {
    $variables['attributes']['class'][] = 'uk-text-center';
    $variables['attributes']['class'][] = 'uk-margin-top';
    $variables['attributes']['class'][] = 'uk-margin-bottom';
    $variables['content']['#prefix'] = '<span uk-icon="cog" class="uk-margin-small-right"></span>';
  }

  // Preprocess branding block.
  if (!empty($variables['plugin_id']) && $variables['plugin_id'] == 'system_branding_block') {
    global $base_url;
    unset($variables['site_name']);
    $variables['#cache']['max-age'] = 0;

    // Desktop logo dimensions.
    $variables['desktop_width'] = '130';
    $variables['desktop_height'] = '';

    // Mobile logo path.
    $variables['site_logo_mobile'] = $base_url . '/' . drupal_get_path('theme', 'circlek') . '/assets/images/logo-mobile.svg';
    // Mobile logo dimensions.
    $variables['mobile_width'] = '60';
    $variables['mobile_height'] = '';

    $variables['attributes']['class'][] = 'ck-site-branding-block';
    // Float logo left.
    $variables['attributes']['class'][] = 'uk-float-left';

    // Front page path.
    $variables['front_path'] = Url::fromRoute('<front>');
  }

  if (!empty($variables['plugin_id']) && $variables['plugin_id'] == 'cp_links') {
    circlek_add_uikit_icon($variables['content']['#items']);
    $variables['content']['#attributes']['class'][] = 'uk-list';
    $variables['content']['#attributes']['class'][] = 'uk-text-bold';
    $variables['content']['#attributes']['class'][] = 'uk-list-large';
  }
}

function circlek_add_uikit_icon(&$items) {
  if (!empty($items) && is_array($items)) {
    $icon_client = \Drupal::service('cp_icons.icons_api');
    $icons = $icon_client->getIcons('service');

    foreach ($items as $item_key => &$item_value) {
      if (isset($item_value['#type']) && $item_value['#type'] == 'link') {
        $attributes = $item_value['#url']->getOption('attributes');
        if (isset($icons[$attributes['id']])) {
          $icon_url  = $icons[$attributes['id']]['url'] . '?color=da291c';
          $icon_name = $icons[$attributes['id']]['name'];
          $item_value['#title'] = [
            '#markup' => '<img class="uk-margin-right" src="' . $icon_url . '" alt="' . $icon_name . '" width="35" height="25"/>' . (string) $items[$item_key]['#title'],
          ];
        }
      }
      else {
        $item_value['#title'] = [
          '#markup' => '<span class="uk-text-uppercase uk-text-small uk-text-muted">' . $item_value['#title'] . '</span>',
        ];
        $item_value['#attributes']['class'][] = 'uk-list';
        $item_value['#attributes']['class'][] = 'uk-padding-remove-left';
        $item_value['#attributes']['class'][] = 'uk-list-large';
        $item_value['#attributes']['class'][] = 'cp-links-section';

        circlek_add_uikit_icon($item_value['#items']);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function circlek_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#attributes']['class'][] = 'ck-form';
}

/**
 * Implements hook_preprocess_input().
 */
function circlek_preprocess_input(&$variables) {
  if ($variables['element']['#type'] == 'checkbox') {
    $variables['attributes']['class'][] = 'uk-checkbox';
  }
  if (in_array($variables['element']['#type'], ['textfield', 'email', 'file', 'password', 'tel'])) {
    $variables['attributes']['class'][] = 'uk-input';
  }
  if ($variables['element']['#type'] == 'submit') {
    $variables['attributes']['class'][] = 'uk-button';
    $variables['attributes']['class'][] = 'uk-button-secondary';
  }
}

/**
 * Implements template_preprocess_select().
 */
function circlek_preprocess_select(&$variables) {
  $variables['attributes']['class'][] = 'uk-select';
}

/**
 * Implements template_preprocess_cp_user_info_list().
 */
function circlek_preprocess_cp_user_info_list(&$variables) {
  $variables['attributes']['uk-accordion'] = TRUE;
}
